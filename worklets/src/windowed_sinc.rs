const HALF_WINDOW_SIZE: usize = 20;
const STEPS: usize = 8;

/*
TODO: Reimplement using macros for easier configuration

Reference: https://www.analog.com/media/en/technical-documentation/dsp-book/dsp_book_Ch16.pdf
Generated using the following code:

```js
  const STEP = 1 / STEPS
  const F_c = 0.5

  const values = [1.0]
  const distances = []

  for (let i = 1; i < WINDOW_SIZE / 2 / STEP + 1; i++) {
    const x = i * STEP

    const sinc =
      Math.sin(2 * Math.PI * F_c * x)
      / (2 * Math.PI * F_c * x)

    const blackmanWindow =
      0.42
      + 0.5 * Math.cos(2 * Math.PI * x / WINDOW_SIZE)
      + 0.08 * Math.cos(4 * Math.PI * x / WINDOW_SIZE)

    const value = sinc * blackmanWindow

    values.push(value)
    distances.push(value - values[i - 1])
  }

  console.log('values:', JSON.stringify(values))
  console.log('distances:', JSON.stringify(distances))
```
*/

const WINDOWED_SINC_VALUES: [f32; HALF_WINDOW_SIZE * STEPS] = [
  1.0,
  0.993429807926665,
  0.9738793845844897,
  0.9418244052996192,
  0.8980418777611466,
  0.8435870189053677,
  0.7797619693611654,
  0.7080773851710843,
  0.6302081783072816,
  0.5479448638093241,
  0.46314210572884096,
  0.377666131984963,
  0.2933427073485098,
  0.2119073139162299,
  0.1349590916331575,
  0.06391994178999152,
  3.743218011896176e-17,
  -0.05582955034861206,
  -0.10285561870268228,
  -0.1406338820582923,
  -0.16899086864342933,
  -0.1880176187399589,
  -0.19805537200736112,
  -0.1996739897845012,
  -0.19364404892634499,
  -0.18090373315747812,
  -0.16252179267186576,
  -0.1396579385581034,
  -0.1135220832884406,
  -0.08533383166043318,
  -0.056283569849179295,
  -0.0274963970807555,
  -3.310443906868468e-17,
  0.025302609372608077,
  0.047654777436541264,
  0.06646182470537404,
  0.08130033797280446,
  0.09192111853269,
  0.09824599284351164,
  0.10035890244686917,
  0.09849187668673214,
  0.09300664869134928,
  0.08437279739027699,
  0.07314338276318719,
  0.059929086353382705,
  0.045371874219313775,
  0.030119166376422833,
  0.014799428265100186,
  2.6865080192271673e-17,
  -0.013752146701906325,
  -0.026006179956650118,
  -0.03639932304050772,
  -0.04466469537950288,
  -0.05063502720224026,
  -0.054242355606016875,
  -0.055513957125874834,
  -0.0545649016591093,
  -0.05158772055186451,
  -0.0468397646346118,
  -0.040628883982419664,
  -0.03329808933581507,
  -0.02520985577023742,
  -0.016730703761443574,
  -0.008216643660087307,
  -1.9872378605190942e-17,
  0.007621954073417199,
  0.014396220277698312,
  0.02012093042750587,
  0.024649715933470543,
  0.02789358095888343,
  0.029820369500604932,
  0.030452007743587473,
  0.029859781169284474,
  0.02815796862806626,
  0.02549620124378627,
  0.02205094174052222,
  0.018016489502003446,
  0.013595909085923981,
  0.008992256397166845,
  0.004400439244044161,
  1.325378423056588e-17,
  -0.004050949649520954,
  -0.007620475396597053,
  -0.010606148173393821,
  -0.012936918881112088,
  -0.01457356860103511,
  -0.01550782031994171,
  -0.015760248034409674,
  -0.015377159727200376,
  -0.014426661015997079,
  -0.012994125661087506,
  -0.011177307497368703,
  -0.009081326124273714,
  -0.006813746677211049,
  -0.004479953418879105,
  -0.002178989224878394,
  -7.826365172768762e-18,
  0.001980613527164802,
  0.0037012724697577503,
  0.005116498931548808,
  0.006197408078237228,
  0.0069314567462593875,
  0.007321520918776562,
  0.007384397716596642,
  0.0071488448471177185,
  0.006653281415979578,
  0.005943278629933364,
  0.005068967486644971,
  0.004082483590781443,
  0.0030355574982024866,
  0.001977343374017842,
  0.0009525602654837087,
  3.952201051703537e-18,
  -0.0008485653150857096,
  -0.001569063976123176,
  -0.0021454009031326915,
  -0.0025693543268674396,
  -0.0028401328208434574,
  -0.002963644403762767,
  -0.0029515378975745105,
  -0.0028200816903405103,
  -0.0025889465838622033,
  -0.0022799577210033707,
  -0.0019158760362850628,
  -0.0015192627103978512,
  -0.0011114712650737205,
  -0.0007118017841508003,
  -0.00033684087843939515,
  -1.5675664736656219e-18,
  0.0002887459112925748,
  0.0005229272291465286,
  0.0006994721834286973,
  0.0008184464012187347,
  0.0008826679185698369,
  0.000897229500635333,
  0.0008689616199554424,
  0.0008058691866003712,
  0.0007165732622091407,
  0.0006097857490351827,
  0.0004938406989512976,
  0.0003763007409610161,
  0.00026365149812991264,
  0.00016109107285107086,
  0.00007241602290470773,
  3.5836288940404154e-19,
  -0.00005514339266776874,
  -0.00009322576487646749,
  -0.00011549221780392489,
  -0.00012398965867877615,
  -0.00012131286422969443,
  -0.00011034578815242313,
  -0.00009401446178505037,
  -0.00007506588144688736,
  -0.000055884661384590895,
  -0.000038356132008640696,
  -0.00002378116693119644,
  -0.000012844521573657873,
  -0.0000056350486942412495,
  -0.000001712997278109329,
  -2.168560057390638e-7,
];

const WINDOWED_SINC_DISTANCES: [f32; HALF_WINDOW_SIZE * STEPS] = [
  -0.0065701920733349795,
  -0.01955042334217527,
  -0.032054979284870555,
  -0.04378252753847256,
  -0.05445485885577894,
  -0.06382504954420232,
  -0.07168458419008106,
  -0.07786920686380272,
  -0.08226331449795754,
  -0.0848027580804831,
  -0.08547597374387794,
  -0.0843234246364532,
  -0.0814353934322799,
  -0.07694822228307241,
  -0.07103914984316598,
  -0.06391994178999148,
  -0.055829550348612096,
  -0.04702606835407022,
  -0.03777826335561002,
  -0.028356986585137023,
  -0.01902675009652957,
  -0.010037753267402222,
  -0.0016186177771400911,
  0.006029940858156224,
  0.012740315768866861,
  0.01838194048561237,
  0.02286385411376235,
  0.026135855269662805,
  0.02818825162800742,
  0.029050261811253884,
  0.028787172768423797,
  0.027496397080755464,
  0.02530260937260811,
  0.022352168063933187,
  0.018807047268832776,
  0.014838513267430423,
  0.010620780559885537,
  0.00632487431082164,
  0.0021129096033575268,
  -0.001867025760137031,
  -0.005485227995382855,
  -0.00863385130107229,
  -0.011229414627089804,
  -0.013214296409804482,
  -0.01455721213406893,
  -0.015252707842890942,
  -0.015319738111322647,
  -0.01479942826510016,
  -0.01375214670190635,
  -0.012254033254743793,
  -0.010393143083857602,
  -0.008265372338995158,
  -0.0059703318227373806,
  -0.0036073284037766162,
  -0.0012716015198579594,
  0.0009490554667655332,
  0.002977181107244792,
  0.0047479559172527094,
  0.006210880652192136,
  0.007330794646604591,
  0.008088233565577654,
  0.008479152008793844,
  0.008514060101356268,
  0.008216643660087288,
  0.007621954073417219,
  0.006774266204281113,
  0.005724710149807558,
  0.004528785505964673,
  0.0032438650254128856,
  0.0019267885417215032,
  0.0006316382429825407,
  -0.0005922265743029988,
  -0.001701812541218213,
  -0.002661767384279992,
  -0.0034452595032640476,
  -0.004034452238518775,
  -0.004420580416079465,
  -0.004603652688757136,
  -0.0045918171531226844,
  -0.004400439244044148,
  -0.004050949649520967,
  -0.0035695257470760985,
  -0.0029856727767967684,
  -0.002330770707718267,
  -0.0016366497199230227,
  -0.0009342517189065997,
  -0.00025242771446796347,
  0.0003830883072092981,
  0.0009504987112032969,
  0.0014325353549095726,
  0.0018168181637188037,
  0.002095981373094989,
  0.0022675794470626643,
  0.002333793258331944,
  0.0023009641940007113,
  0.002178989224878386,
  0.0019806135271648096,
  0.0017206589425929485,
  0.001415226461791058,
  0.0010809091466884198,
  0.0007340486680221595,
  0.0003900641725171749,
  0.00006287679782007987,
  -0.00023555286947892374,
  -0.0004955634311381409,
  -0.0007100027860462137,
  -0.0008743111432883933,
  -0.0009864838958635273,
  -0.0010469260925789568,
  -0.0010582141241846444,
  -0.0010247831085341335,
  -0.0009525602654837048,
  -0.0008485653150857135,
  -0.0007204986610374665,
  -0.0005763369270095154,
  -0.00042395342373474816,
  -0.0002707784939760178,
  -0.00012351158291930937,
  0.00001210650618825625,
  0.0001314562072340002,
  0.000231135106478307,
  0.0003089888628588326,
  0.0003640816847183079,
  0.0003966133258872116,
  0.00040779144532413067,
  0.00039966948092292026,
  0.0003749609057114051,
  0.0003368408784393936,
  0.00028874591129257637,
  0.00023418131785395385,
  0.00017654495428216864,
  0.0001189742177900374,
  0.00006422151735110222,
  0.000014561582065496128,
  -0.000028267880679890673,
  -0.00006309243335507117,
  -0.00008929592439123053,
  -0.00010678751317395798,
  -0.00011594505008388507,
  -0.0001175399579902815,
  -0.00011264924283110346,
  -0.00010256042527884179,
  -0.00008867504994636313,
  -0.00007241602290470738,
  -0.0000551433926677691,
  -0.00003808237220869875,
  -0.0000222664529274574,
  -0.000008497440874851258,
  0.000002676794449081715,
  0.000010967076077271305,
  0.00001633132636737276,
  0.000018948580338163005,
  0.000019181220062296468,
  0.0000175285293759502,
  0.000014574965077444256,
  0.000010936645357538568,
  0.000007209472879416623,
  0.00000392205141613192,
  0.0000014961412723702652,
  2.168560057390638e-7,
];

pub fn windowed_sinc(x: f32) -> f32 {
  assert!((x as usize) <= HALF_WINDOW_SIZE);

  let index = (x * STEPS as f32).abs();
  let index_int = index as usize;
  let index_fract = index.fract();

  WINDOWED_SINC_VALUES[index_int] + WINDOWED_SINC_DISTANCES[index_int] * index_fract
}

pub fn windowed_sinc_sample(position: f32, buffer: &[f32]) -> f32 {
  let mut sample = 0.0;

  let position_int = position as i32;
  let position_fract = position.fract();
  let size = buffer.len() as i32;

  if position_fract < f32::EPSILON {
    return buffer[position_int as usize];
  }

  for i in -(HALF_WINDOW_SIZE as i32 - 1)..(HALF_WINDOW_SIZE as i32) {
    let index = {
      if position_int < -i {
        size + position_int + i
      } else if position_int + i >= size {
        position_int + i - size
      } else {
        position_int + i
      }
    };

    assert!(index >= 0);
    assert!(index < size);

    sample += windowed_sinc((i as f32) + position_fract) * buffer[index as usize];
  }

  sample
}
